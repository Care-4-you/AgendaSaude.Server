// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id            Int            @id @default(autoincrement())
  name          String
  specialty     String
  phone         String
  email         String         @unique
  password_hash String
  address       String
  cep           String
  city          String
  state         String
  neighborhood  String
  complement    String?
  created_at    DateTime       @default(now())
  //TODO: como será utilizado essas infos
  // agreements      String[]
  // payment_methods String[]
  Medic         Medic[] // Um-para-muitos
  Consultation  Consultation[] // Um-para-Muitos

  @@map("clinics")
}

model Pacient {
  id            Int      @id @default(autoincrement())
  name          String
  address       String
  phone         String
  email         String   @unique
  password_hash String
  created_at    DateTime @default(now())

  Treatment    Treatment[] // Relação um-para-muitos
  Consultation Consultation[] // Um-para-muitos

  @@map("pacients")
}

model Medic {
  id         Int      @id @default(autoincrement())
  name       String
  specialty  String
  crm        String
  created_at DateTime @default(now())

  clinic   Clinic @relation(fields: [clinicId], references: [id]) // Muitos-para-um
  clinicId Int

  Treatment    Treatment[] // Relação um-para-muitos
  Consultation Consultation[] // Um-para-muitos

  @@map("medics")
}

model Consultation {
  id           Int      @id @default(autoincrement())
  consult_time DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  pacient   Pacient @relation(fields: [pacientId], references: [id]) // Muitos-para-um
  pacientId Int

  medic   Medic @relation(fields: [medicId], references: [id]) // Muitos-para-um
  medicId Int

  clinic   Clinic @relation(fields: [clinicId], references: [id]) // Muitos-para-um
  clinicId Int

  Treatment Treatment[] // Relação um-para-muitos

  @@map("consultations")
}

model Treatment {
  id          Int      @id @default(autoincrement())
  description String
  attached    String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  pacient   Pacient @relation(fields: [pacientId], references: [id]) // Relação muitos-para-um
  pacientId Int

  medic   Medic @relation(fields: [medicId], references: [id]) // Relação muitos-para-um
  medicId Int

  consulation   Consultation @relation(fields: [consulationId], references: [id]) // Relação muitos-para-um
  consulationId Int

  @@map("treatments")
}
